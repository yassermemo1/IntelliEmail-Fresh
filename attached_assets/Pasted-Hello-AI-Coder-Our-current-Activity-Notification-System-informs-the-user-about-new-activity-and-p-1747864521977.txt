Hello AI Coder,
Our current 'Activity Notification System' informs the user about new activity and prompts them to refresh. To enhance the user experience and make the application feel truly dynamic, we need the Dashboard and Task Lists in the React frontend to update automatically in real-time (or near real-time) when new emails are processed and new tasks are generated by the backend, without requiring a manual user refresh.
Project: AI-Powered Email Task Manager (Business Critical)
Current Date for Context: Thursday, May 22, 2025, 12:21 AM (Riyadh Time, +03)
Current Location Context: Riyadh, Saudi Arabia
Focus for this Chunk:
Modify the React frontend (DashboardPage.tsx, TasksPage.tsx, and related state management/data fetching logic) to automatically update when new data is available, triggered by the backend's processing of real-time email synchronization.
Prerequisites:
 * The backend real-time email synchronization pipeline is functional: new emails are ingested, processed by RQ workers with Ollama, and new tasks/AI features are stored in PostgreSQL.
 * The frontend ActivityNotification.tsx component currently polls a backend endpoint (e.g., /api/v1/users/me/activity-status) and can detect when new activity has occurred for the user.
 * React Query (or a similar data fetching/caching library) is used for fetching data for the Dashboard and Task List.
 * Global state management (Zustand/Context) is available.
Frontend Implementation Requirements:
 * Leverage Existing Activity Notification:
   * When your ActivityNotification.tsx (or the service it uses, e.g., activityService.ts) detects {"new_activity_found": true} from the backend polling:
     * Option A (React Query Invalidation - Preferred):
       * Instead of (or in addition to) just showing a "Click to refresh" banner, this detection should programmatically invalidate relevant React Query keys (e.g., the query key for getTasks, the query key for getDashboardStats).
       * React Query, upon query invalidation, will automatically refetch the data in the background if the component using that query is active. When the new data arrives, the UI will re-render with the latest information.
     * Option B (Global State Trigger & Manual Refetch):
       * The activity detection could set a global state flag (e.g., in Zustand/Context).
       * Components like DashboardPage.tsx and TasksPage.tsx could subscribe to this flag. When it changes to true, they could trigger their own data refetching functions.
     * Option C (More Advanced - Server-Sent Events - SSE):
       * Backend: Modify the backend. When an RQ task finishes processing an item that results in new data for a user (e.g., new task created), the backend could send an SSE message to the specific user's active frontend session(s). This SSE message could indicate the type of data updated (e.g., 'new_task', 'new_email_processed').
       * Frontend: The frontend would establish an SSE connection. Upon receiving an event:
         * Invalidate the relevant React Query key(s) as in Option A.
         * Or, if the SSE message contains enough data, try to update the local cache/state directly (more complex to keep consistent).
   * AI Coder, please evaluate and implement Option A (React Query Invalidation) first, as it's often the cleanest way if React Query is already in use. If you foresee issues or prefer SSE (Option C) and can implement a basic version now, that's also acceptable.
 * UI Feedback During Auto-Update:
   * When data is being automatically refetched in the background due to invalidation:
     * The existing loading indicators on the Dashboard/Task List should ideally activate.
     * The update should be as seamless as possible for the user. A small, temporary "Updating..." indicator might be useful if the refetch takes a moment.
 * No Full Page Reload:
   * The goal is to update the relevant data and components without requiring a full browser page reload.
 * Testing:
   * Scenario:
     * Have the React application open on the Dashboard or TasksPage.
     * Send a new email to a connected and actively syncing test account.
     * Wait for the backend to process it (monitor RQ worker logs).
   * Verification:
     * Does the ActivityNotification system detect the new activity?
     * Crucially, do the task counts on the Dashboard and the items in the Task List update automatically within a reasonable timeframe (e.g., shortly after the polling interval for activity status, or immediately if using SSE) without you manually clicking a refresh button?
     * Is the update smooth? Are there any UI glitches or excessive loading spinners?
Considerations:
 * Polling Frequency (ActivityNotification): If relying on polling + invalidation, the "real-time" feel is limited by the polling interval. A 30-60 second interval is a balance between responsiveness and server load.
 * Data Volume with SSE: If using SSE and pushing actual data, be mindful of payload size. Pushing just an "event type" and letting React Query refetch is often more robust.
 * Focus on Dashboard and Main Task List: These are the highest priority areas for automatic updates.
This enhancement will make the application feel much more modern and responsive to the underlying email processing. Please proceed with making the Dashboard and Task List UI update automatically when new data is processed by the backend.